{"ast":null,"code":"export default function stripPrefix(str) {\n  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n\n  if (!prefix) {\n    return str;\n  }\n\n  if (str === prefix) {\n    return \"/\";\n  }\n\n  if (str.startsWith(prefix + \"/\")) {\n    return str.slice(prefix.length);\n  }\n\n  return str;\n}","map":{"version":3,"sources":["/home/michael/code/auderer/auderer.dev/.cache/strip-prefix.js"],"names":["stripPrefix","str","prefix","startsWith","slice","length"],"mappings":"AAKA,eAAe,SAASA,WAAT,CAAqBC,GAArB,EAAuC;AAAA,MAAbC,MAAa;;AACpD,MAAI,CAACA,MAAL,EAAa;AACX,WAAOD,GAAP;AACD;;AAED,MAAIA,GAAG,KAAKC,MAAZ,EAAoB;AAClB;AACD;;AAED,MAAID,GAAG,CAACE,UAAJ,CAAkBD,MAAlB,OAAJ,EAAkC;AAChC,WAAOD,GAAG,CAACG,KAAJ,CAAUF,MAAM,CAACG,MAAjB,CAAP;AACD;;AAED,SAAOJ,GAAP;AACD","sourcesContent":["/**\n * Remove a prefix from a string. Return the input string if the given prefix\n * isn't found.\n */\n\nexport default function stripPrefix(str, prefix = ``) {\n  if (!prefix) {\n    return str\n  }\n\n  if (str === prefix) {\n    return `/`\n  }\n\n  if (str.startsWith(`${prefix}/`)) {\n    return str.slice(prefix.length)\n  }\n\n  return str\n}\n"]},"metadata":{},"sourceType":"module"}