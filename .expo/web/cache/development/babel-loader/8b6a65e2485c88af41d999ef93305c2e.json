{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { match } from \"@reach/router/lib/utils\";\nimport stripPrefix from \"./strip-prefix\";\nimport normalizePagePath from \"./normalize-page-path\";\nvar pathCache = new Map();\nvar matchPaths = [];\n\nvar trimPathname = function trimPathname(rawPathname) {\n  var pathname = decodeURIComponent(rawPathname);\n  var trimmedPathname = stripPrefix(pathname, __BASE_PATH__).split(\"#\")[0].split(\"?\")[0];\n  return trimmedPathname;\n};\n\nfunction absolutify(path) {\n  if (path.startsWith(\"/\") || path.startsWith(\"https://\") || path.startsWith(\"http://\")) {\n    return path;\n  }\n\n  return new URL(path, window.location.href + (window.location.href.endsWith(\"/\") ? \"\" : \"/\")).pathname;\n}\n\nexport var setMatchPaths = function setMatchPaths(value) {\n  matchPaths = value;\n};\nexport var findMatchPath = function findMatchPath(rawPathname) {\n  var trimmedPathname = cleanPath(rawPathname);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(matchPaths), _step; !(_step = _iterator()).done;) {\n    var _ref = _step.value;\n    var matchPath = _ref.matchPath;\n    var path = _ref.path;\n\n    if (match(matchPath, trimmedPathname)) {\n      return normalizePagePath(path);\n    }\n  }\n\n  return null;\n};\nexport var findPath = function findPath(rawPathname) {\n  var trimmedPathname = trimPathname(absolutify(rawPathname));\n\n  if (pathCache.has(trimmedPathname)) {\n    return pathCache.get(trimmedPathname);\n  }\n\n  var foundPath = findMatchPath(trimmedPathname);\n\n  if (!foundPath) {\n    foundPath = cleanPath(rawPathname);\n  }\n\n  pathCache.set(trimmedPathname, foundPath);\n  return foundPath;\n};\nexport var cleanPath = function cleanPath(rawPathname) {\n  var trimmedPathname = trimPathname(absolutify(rawPathname));\n  var foundPath = trimmedPathname;\n\n  if (foundPath === \"/index.html\") {\n    foundPath = \"/\";\n  }\n\n  foundPath = normalizePagePath(foundPath);\n  return foundPath;\n};","map":{"version":3,"sources":["/home/michael/code/auderer/auderer.dev/.cache/find-path.js"],"names":["match","stripPrefix","normalizePagePath","pathCache","Map","matchPaths","trimPathname","rawPathname","pathname","decodeURIComponent","trimmedPathname","__BASE_PATH__","split","absolutify","path","startsWith","URL","window","location","href","endsWith","setMatchPaths","value","findMatchPath","cleanPath","matchPath","findPath","has","get","foundPath","set"],"mappings":";;;;;;AAAA,SAASA,KAAT,QAAsB,yBAAtB;AACA,OAAOC,WAAP;AACA,OAAOC,iBAAP;AAEA,IAAMC,SAAS,GAAG,IAAIC,GAAJ,EAAlB;AACA,IAAIC,UAAU,GAAG,EAAjB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,WAAW,EAAI;AAClC,MAAMC,QAAQ,GAAGC,kBAAkB,CAACF,WAAD,CAAnC;AAEA,MAAMG,eAAe,GAAGT,WAAW,CAACO,QAAD,EAAWG,aAAX,CAAX,CAErBC,KAFqB,MAEV,CAFU,EAIrBA,KAJqB,MAIV,CAJU,CAAxB;AAMA,SAAOF,eAAP;AACD,CAVD;;AAYA,SAASG,UAAT,CAAoBC,IAApB,EAA0B;AAExB,MACEA,IAAI,CAACC,UAAL,SACAD,IAAI,CAACC,UAAL,YADA,IAEAD,IAAI,CAACC,UAAL,WAHF,EAIE;AACA,WAAOD,IAAP;AACD;;AAGD,SAAO,IAAIE,GAAJ,CACLF,IADK,EAELG,MAAM,CAACC,QAAP,CAAgBC,IAAhB,IAAwBF,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,QAArB,gBAAxB,CAFK,EAGLZ,QAHF;AAID;;AAOD,OAAO,IAAMa,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK,EAAI;AACpCjB,EAAAA,UAAU,GAAGiB,KAAb;AACD,CAFM;AAYP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAhB,WAAW,EAAI;AAC1C,MAAMG,eAAe,GAAGc,SAAS,CAACjB,WAAD,CAAjC;;AAEA,uDAAkCF,UAAlC,wCAA8C;AAAA;AAAA,QAAjCoB,SAAiC,QAAjCA,SAAiC;AAAA,QAAtBX,IAAsB,QAAtBA,IAAsB;;AAC5C,QAAId,KAAK,CAACyB,SAAD,EAAYf,eAAZ,CAAT,EAAuC;AACrC,aAAOR,iBAAiB,CAACY,IAAD,CAAxB;AACD;AACF;;AAED,SAAO,IAAP;AACD,CAVM;AAoBP,OAAO,IAAMY,QAAQ,GAAG,SAAXA,QAAW,CAAAnB,WAAW,EAAI;AACrC,MAAMG,eAAe,GAAGJ,YAAY,CAACO,UAAU,CAACN,WAAD,CAAX,CAApC;;AACA,MAAIJ,SAAS,CAACwB,GAAV,CAAcjB,eAAd,CAAJ,EAAoC;AAClC,WAAOP,SAAS,CAACyB,GAAV,CAAclB,eAAd,CAAP;AACD;;AAED,MAAImB,SAAS,GAAGN,aAAa,CAACb,eAAD,CAA7B;;AAEA,MAAI,CAACmB,SAAL,EAAgB;AACdA,IAAAA,SAAS,GAAGL,SAAS,CAACjB,WAAD,CAArB;AACD;;AAEDJ,EAAAA,SAAS,CAAC2B,GAAV,CAAcpB,eAAd,EAA+BmB,SAA/B;AAEA,SAAOA,SAAP;AACD,CAfM;AAwBP,OAAO,IAAML,SAAS,GAAG,SAAZA,SAAY,CAAAjB,WAAW,EAAI;AACtC,MAAMG,eAAe,GAAGJ,YAAY,CAACO,UAAU,CAACN,WAAD,CAAX,CAApC;AAEA,MAAIsB,SAAS,GAAGnB,eAAhB;;AACA,MAAImB,SAAS,kBAAb,EAAiC;AAC/BA,IAAAA,SAAS,MAAT;AACD;;AAEDA,EAAAA,SAAS,GAAG3B,iBAAiB,CAAC2B,SAAD,CAA7B;AAEA,SAAOA,SAAP;AACD,CAXM","sourcesContent":["import { match } from \"@reach/router/lib/utils\"\nimport stripPrefix from \"./strip-prefix\"\nimport normalizePagePath from \"./normalize-page-path\"\n\nconst pathCache = new Map()\nlet matchPaths = []\n\nconst trimPathname = rawPathname => {\n  const pathname = decodeURIComponent(rawPathname)\n  // Remove the pathPrefix from the pathname.\n  const trimmedPathname = stripPrefix(pathname, __BASE_PATH__)\n    // Remove any hashfragment\n    .split(`#`)[0]\n    // Remove search query\n    .split(`?`)[0]\n\n  return trimmedPathname\n}\n\nfunction absolutify(path) {\n  // If it's already absolute, return as-is\n  if (\n    path.startsWith(`/`) ||\n    path.startsWith(`https://`) ||\n    path.startsWith(`http://`)\n  ) {\n    return path\n  }\n  // Calculate path relative to current location, adding a trailing slash to\n  // match behavior of @reach/router\n  return new URL(\n    path,\n    window.location.href + (window.location.href.endsWith(`/`) ? `` : `/`)\n  ).pathname\n}\n\n/**\n * Set list of matchPaths\n *\n * @param {Array<{path: string, matchPath: string}>} value collection of matchPaths\n */\nexport const setMatchPaths = value => {\n  matchPaths = value\n}\n\n/**\n * Return a matchpath url\n * if `match-paths.json` contains `{ \"/foo*\": \"/page1\", ...}`, then\n * `/foo?bar=far` => `/page1`\n *\n * @param {string} rawPathname A raw pathname\n * @return {string|null}\n */\nexport const findMatchPath = rawPathname => {\n  const trimmedPathname = cleanPath(rawPathname)\n\n  for (const { matchPath, path } of matchPaths) {\n    if (match(matchPath, trimmedPathname)) {\n      return normalizePagePath(path)\n    }\n  }\n\n  return null\n}\n\n// Given a raw URL path, returns the cleaned version of it (trim off\n// `#` and query params), or if it matches an entry in\n// `match-paths.json`, its matched path is returned\n//\n// E.g. `/foo?bar=far` => `/foo`\n//\n// Or if `match-paths.json` contains `{ \"/foo*\": \"/page1\", ...}`, then\n// `/foo?bar=far` => `/page1`\nexport const findPath = rawPathname => {\n  const trimmedPathname = trimPathname(absolutify(rawPathname))\n  if (pathCache.has(trimmedPathname)) {\n    return pathCache.get(trimmedPathname)\n  }\n\n  let foundPath = findMatchPath(trimmedPathname)\n\n  if (!foundPath) {\n    foundPath = cleanPath(rawPathname)\n  }\n\n  pathCache.set(trimmedPathname, foundPath)\n\n  return foundPath\n}\n\n/**\n * Clean a url and converts /index.html => /\n * E.g. `/foo?bar=far` => `/foo`\n *\n * @param {string} rawPathname A raw pathname\n * @return {string}\n */\nexport const cleanPath = rawPathname => {\n  const trimmedPathname = trimPathname(absolutify(rawPathname))\n\n  let foundPath = trimmedPathname\n  if (foundPath === `/index.html`) {\n    foundPath = `/`\n  }\n\n  foundPath = normalizePagePath(foundPath)\n\n  return foundPath\n}\n"]},"metadata":{},"sourceType":"module"}